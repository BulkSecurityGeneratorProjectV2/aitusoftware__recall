plugins {
    id 'net.minecrell.licenser' version '0.4.1' apply false
    id 'me.champeau.gradle.jmh' version '0.4.8' apply false
}

def recallVersion = file('version.txt').text.trim()

subprojects {
    repositories {
        mavenCentral()
        jcenter()
    }

}

subprojects {
    version = recallVersion

    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'net.minecrell.licenser'

    test {
        useJUnitPlatform()
    }



    dependencies {
        checkstyle 'com.puppycrawl.tools:checkstyle:8.11'
        testCompile group: 'com.google.truth', name: 'truth', version: '0.42'
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.2'
        testCompile 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
    }

    checkstyle {
       configFile = new File(rootDir, 'config/checkstyle.xml')
        toolVersion = '8.11'
    }

    license {
        header = new File(rootDir, 'config/header.txt')
        newLine = false
        exclude '**/sbe/example/**'
    }
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    artifacts {
        archives sourcesJar, javadocJar
    }

    javadoc {
    }
}



project(':recall-store') {
    apply plugin: 'me.champeau.gradle.jmh'

    dependencies {
        compile 'org.agrona:agrona:0.9.28'
        jmh 'org.openjdk.jmh:jmh-core:1.21'
        jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
    }

    jmh {
        iterations = 5
        fork = 2
        warmupIterations = 5
        warmup = '2s'
        timeOnIteration = '5s'
        duplicateClassesStrategy = 'warn'
    }
}

project(':recall-sbe') {
    dependencies {
        compile group: 'uk.co.real-logic', name: 'sbe-all', version: '1.10.2'
        compile project(':recall-store')
        compile 'org.agrona:agrona:0.9.28'
    }

    File generatedSrcDir = file("${buildDir}/generated-sources/java")

    sourceSets {
        test.java.srcDir generatedSrcDir
    }

    compileTestJava.dependsOn('generateSbeFiles')
    
    task generateSbeFiles(type: JavaExec) {
        main 'uk.co.real_logic.sbe.SbeTool'
        classpath sourceSets.main.runtimeClasspath
        jvmArgs = ["-Dsbe.output.dir=${generatedSrcDir.getAbsolutePath()}", '-Dsbe.generate.ir=true', '-Dsbe.java.generate.interfaces=true']
        args "${project.projectDir}/src/test/resources/sbe-schema.xml"
    }
}

project(':recall-annotations') {

}
